#pragma once

#define OFF 0  
#define ON 1  
#define ENABLE_THIS_ABILITY ON

// 前置声明
template<class REQ, class RESP>
class WFNetworkTask;

namespace protocol
{
    class HttpRequest;
    class HttpResponse;
} // namespace protocol
using WFHttpTask = WFNetworkTask<protocol::HttpRequest, protocol::HttpResponse>;

#define HttpMethodGet		"GET"
#define HttpMethodHead		"HEAD"
#define HttpMethodPost		"POST"
#define HttpMethodPut		"PUT"
#define HttpMethodPatch		"PATCH"
#define HttpMethodDelete	"DELETE"
#define HttpMethodConnect	"CONNECT"
#define HttpMethodOptions	"OPTIONS"
#define HttpMethodTrace		"TRACE"

#include <cstdint>

// 编译打包是否输出基础通信数据结构
#if @EXPOSE_UNIT_HEADER@ == ENABLE_THIS_ABILITY
#include "multipart_parser.h"
#else
namespace communicate
{
class MultipartParser;
}
#endif

namespace communicate
{
struct TimeOutParams
{
    int connect_timeout = 10 * 1000;            // 连接超时限制(单位 ms)
    int response_timeout = 10 * 1000;           // 等待响应时间(单位 ms)
    int ssl_connect_timeout = 10 * 1000;        // 与目标完成SSL握手的超时(单位 ms)
};

struct GlobalSetting
{
    TimeOutParams global_outTime;               // 全局默认超时配置
    TimeOutParams dns_outTime;                  // 触发dns解析时超时配置
    int handler_threads = 4;                    // 处理网络任务请求及回复处理，线程池数
    int poller_threads = 4;                     // 负责epoll（kqueue）和消息反序列化，线程池数
    const char *resolv_conf_path = "/etc/resolv.conf";
    const char *hosts_path = "/etc/hosts";      // dns配置路径，映射路径，目前需要自定义（主要用于一些无效域名做本地映射使用的场景）
};

namespace http
{
enum HTTP_ERROR_CODE
{
    SUCCESS = 0,
    WAIT_LOCAL_RE,
    /* 通用错误 */
    UNDEFINED,
    SSL_ERROR,
    SYSTEM_ERROR,
    TASK_ERROR,
    /* 客户端错误 */
    DNS_ERROR,
    /* 服务端错误 */
    NOREPLY
};

struct ReconnectCfg
{
    bool enable_features = false;   // 启用重新尝试功能
    uint32_t max_spaceTime = 60;    // 最大任务重连间隔（单位：秒） 
    uint8_t max_nums = 3;           // 最大失败任务重连次数
    uint32_t max_waitTime = 0;      // 整个任务流程最多花费时间（单位：秒）（超时直接结束并返回）
                                    //（0为不考虑任务花费时间，直到重连次数尝试完）
};
} // namespace communicate
} // namespace communicate::http

// 编译打包是否输出分块传输内容
#if @RESUME_MOUDLE_MAKE@ == ENABLE_THIS_ABILITY
#include <cstdint>

namespace communicate
{
struct Resume_FileInfo
{
    char resumeName[198];       // 记录断点续传信息的文件名
    char filePath[328];         // 目标文件的路径
    char fileHash[68];          // 锁定文件的hash值
    long long lastEndPos = 0;   // 最终处理结束的下标
    uint32_t chunkSize = 0;     // 分块尺寸
    char commAddr[648];         // 交互的地址   “作为任务划分的key”
};
} // namespace communicate
#endif
