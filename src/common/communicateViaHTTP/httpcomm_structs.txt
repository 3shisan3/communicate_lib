#pragma once

#define OFF 0  
#define ON 1  
#define ENABLE_THIS_ABILITY ON

// 前置声明
template<class REQ, class RESP>
class WFNetworkTask;

namespace protocol
{
    class HttpRequest;
    class HttpResponse;
} // namespace protocol
using WFHttpTask = WFNetworkTask<protocol::HttpRequest, protocol::HttpResponse>;

#define HttpMethodGet		"GET"
#define HttpMethodHead		"HEAD"
#define HttpMethodPost		"POST"
#define HttpMethodPut		"PUT"
#define HttpMethodPatch		"PATCH"
#define HttpMethodDelete	"DELETE"
#define HttpMethodConnect	"CONNECT"
#define HttpMethodOptions	"OPTIONS"
#define HttpMethodTrace		"TRACE"

// 编译打包是否输出基础通信数据结构
#if @EXPOSE_UNIT_HEADER@ == ENABLE_THIS_ABILITY
#include "multipart_parser.h"
#else
namespace communicate
{
class MultipartParser;
}
#endif

namespace communicate::http
{
enum HTTP_ERROR_CODE
{
    SUCCESS = 0,
    WAIT_LOCAL_RE,
    /* 通用错误 */
    UNDEFINED_FAILED,
    SSL_ERROR,
    SYSTEM_ERROR,
    TASK_ERROR,
    /* 客户端错误 */
    DNS_ERROR,
    /* 服务端错误 */
    NOREPLY
};
} // namespace communicate::http

// 编译打包是否输出分块传输内容
#if @RESUME_MOUDLE_MAKE@ == ENABLE_THIS_ABILITY
#include <cstdint>

namespace communicate
{
struct Resume_FileInfo
{
    char resumeName[198];       // 断电续传信息的记录文件名
    char filePath[328];         // 记录信息的目标文件路径
    char fileHash[68];          // 锁定文件的hash值
    long long lastEndPos = 0;   // 最终处理结束的下标
    uint32_t chunkSize = 0;     // 分块尺寸
    char commAddr[648];         // 交互的地址   “作为任务划分的key”
};
} // namespace communicate
#endif
